package kotlincourse.lesson8

import kotlincourse.lesson6.converMark
import java.util.concurrent.Phaser

fun main () {

//Создайте функцию, которая будет анализировать входящие фразы и применять к ним различные преобразования, делая текст более ироничным или забавным.
// Функция должна уметь распознавать ключевые слова или условия и соответственно изменять фразу.

    println("Правила Проверки и Преобразования:")
//Если фраза содержит слово "невозможно":
// > Преобразование: Замените "невозможно" на "совершенно точно возможно, просто требует времени".

//Примеры Тестовых Фраз:
    println("Это невозможно выполнить за один день")
    val text1 = "Это невозможно выполнить за один день"
        .replace("невозможно", "совершенно точно возможно, просто требует времени")
    println(text1)
    println()

//Если фраза начинается с "Я не уверен":
// > Преобразование: Добавьте в конец фразы ", но моя интуиция говорит об обратном".

    val text2 = "Я не уверен в успехе этого проекта"
    println(text2)
    fun convertText (text2: String): String {
        return when {
            text2.startsWith("Я не уверен", true) -> "${text2.trim('.')}, но моя интуиция говорит об обратном"
            else -> ""
        }
    }
    println(convertText(text2))
    println()

//Если фраза содержит слово "катастрофа":
// > Преобразование: Замените "катастрофа" на "интересное событие".

    println("Произошла катастрофа на сервере.")
    val text3 = "Произошла катастрофа на сервере."
        .replace("катастрофа", "интересное событие")
        .replace("Произошла", "Произошо")
    println(text3)
    println()

//Если фраза заканчивается на "без проблем":
// > Преобразование: Замените "без проблем" на "с парой интересных вызовов на пути".

    println("Этот код работает без проблем")
    val text4 ="Этот код работает без проблем"
        .replace("без проблем", "с парой интересных вызовов на пути")
    println(text4)
    println()

//Если фраза содержит только одно слово:
// > Преобразование: Добавьте перед словом "Иногда," и после слова ", но не всегда".

    println("Удача")
    val text5 = "Удача"
        .replace("Удача", "удача")
    println("Иногда, ${text5}, но не всегда")
    println()

    println("Задание 1: Извлечение Даты из Строки Лога.")
    println("Используй indexOf или split для получения правой части сообщения.")
//Описание: У вас есть строка лога вида "Пользователь вошел в систему -> 2021-12-01 09:48:23".
// Извлеките отдельно дату и время из этой строки и сразу распечатай их по очереди.

    println("Пользователь вошел в систему -> 2021-12-01 09:48:23")
    val text6 = "Пользователь вошел в систему -> 2021-12-01 09:48:23"
        .split(" ")
    println("Дата: ${text6[5]}")
    println("Время: ${text6[6]}")
    println()

    println("Задание 2: Маскирование Личных Данных")
//Описание: Дана строка с номером кредитной карты "4539 1488 0343 6467". Замаскируйте все цифры, кроме последних четырех, символами "*".

    println("4539 1488 0343 6467")
    val text7 = "4539 1488 0343 6467"
        .split(" ")
    println("**** **** **** ${text7[3]}")
    println()

    println("Задание 3: Форматирование Адреса Электронной Почты. Используй replace")
//Описание: У вас есть электронный адрес "username@example.com". Преобразуйте его в строку "username [at] example [dot] com".

    println("username@example.com")
    val text8 = "username@example.com"
        .replace("@", " [at] ")
        .replace(".", " [dot] ")
    println(text8)
    println()

//Задание 4: Извлечение Имени Файла из Пути
//Описание: Дан путь к файлу "C:/Пользователи/Документы/report.txt". Извлеките название файла с расширением.

    println("C:/Пользователи/Документы/report.txt")
    val text9 = "C:/Пользователи/Документы/report.txt"
        .split("/")
    println(text9[3])
    println()

    println("Задание 5: Создание Аббревиатуры из Фразы. Используй split с набором символов для разделения. Используй for для перебора слов.")
// Используй var переменную для накопления первых букв.
//Описание: У вас есть фраза, например "Объектно-ориентированное программирование". Создайте аббревиатуру из начальных букв слов (например, "ООП").

    println("Объектно-ориентированное программирование")
    val text10 = "Объектно-ориентированное программирование"
        .uppercase()
        .split("-", " ")
    val firstLetter = text10[0]
    val secondLetter = text10[1]
    val thirdLetter = text10[2]
    println("${firstLetter[0]}${secondLetter[0]}${thirdLetter[0]}")
    println()

    println("Дополнительные задания")
//Написать метод, который преобразует строку из нескольких слов в строку, где каждое слово начинается с заглавной буквы а все остальные - строчные.
// (можно использовать такой же подход как в задании 5, но накапливать не первые буквы а целиком слова, составленные из первой буквы с uppercase и оставшейся части слова)

    var dopText1 = "Отдел особо опасных дел"


//Написать шифратор/дешифратор для строки. Шифровка производится путём замены двух соседних букв между собой: Kotlin шифруется в oKltni.
// Дешифровка выполняется аналогично. Если длина строки - нечётная, в конец добавляется символ пробела до начала шифрования. Таким образом все шифрованные сообщения будут с чётной длинной. Должно получиться два публичных метода: encrypt() и decrypt() которые принимают и возвращают строку.

//Таблица с примерами форматирования строк
//https://docs.google.com/spreadsheets/d/11hRZpqELzL35UCwQoZioEzK1f1FTYrSRj_lh-14rzXA/edit?usp=drive_link

//Таблица умножения

//Вывести таблицу умножения в консоль так, чтобы были ровные строки и столбцы.
// В заголовках столбцов и строк - числа для перемножения. В перекрестии - результат умножения.
// Каждый столбец должен быть выровнен по правому краю.
//Для печати результата в той же строке использовать print()
//Для перехода на следующую строку использовать println()
//Для выравнивания использовать функции форматирования строк с шаблоном (%s

}